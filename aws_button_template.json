{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Mongoose OS Internet Button Template",
  "Parameters": {
    "TopicName": {
      "Description": "IoT Topic Name",
      "Type": "String",
      "AllowedPattern": "[a-zA-Z0-9_/#+]*",
      "MinLength": "1",
      "MaxLength": "2048",
      "ConstraintDescription": "must contain only alphanumberic characters and underscores"
    },
    "SubscriptionEmail": {
      "Description": "Subscription Email",
      "Type": "String",
      "AllowedPattern": ".+",
      "MinLength": "1",
      "MaxLength": "2048"
    }
  },
  "Resources": {
    "mySNSTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Subscription": [
          {
            "Protocol": "email",
            "Endpoint": {"Ref": "SubscriptionEmail"}
          }
        ]
      }
    },
    "myLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": {
            "Fn::Join": ["\n", [
              "var AWS = require('aws-sdk');",
              "",
              "exports.handler = (event, context, callback) => {",
              {"Fn::Join": ["", ["    var message = 'Button pressed: ", { "Ref": "TopicName" }, "';"]]},
              "    var sns = new AWS.SNS();",
              "    sns.publish({",
              {"Fn::Join": ["", ["        TopicArn: '", { "Ref": "mySNSTopic" }, "',"]]},
              "        Message: JSON.stringify(message)",
              "    }, function(err, data) {",
              "        if(err) {",
              "            console.error('error publishing to SNS');",
              "            context.fail(err);",
              "        } else {",
              "            console.info('message published to SNS');",
              "            context.succeed();",
              "        }",
              "    });",
              "};",
              ""
            ]]
          }
        },
        "Handler": "index.handler",
        "Runtime": "nodejs8.10",
        "Role": {"Fn::GetAtt": ["myLambdaRoleWhichAllowsCallingSNS", "Arn"]}
      }
    },
    "myLambdaRoleWhichAllowsCallingSNS": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {
              "Service": [ "lambda.amazonaws.com" ]
            },
            "Action": [ "sts:AssumeRole" ]
          } ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "allow-call-sns",
            "PolicyDocument": {
              "Version" : "2012-10-17",
              "Statement": [ {
                "Effect": "Allow",
                "Action": "sns:Publish",
                "Resource": { "Ref": "mySNSTopic" }
              } ]
            }
          }
        ]
      }
    },
    "myTopicRule": {
      "Type": "AWS::IoT::TopicRule",
      "Properties": {
        "TopicRulePayload": {
          "RuleDisabled": "false",
          "Sql": {
            "Fn::Join" : [ "", ["SELECT * FROM '", { "Ref": "TopicName" }, "'"] ]
          },
          "Actions": [
            {
              "Lambda": {
                "FunctionArn": {"Fn::GetAtt": ["myLambda", "Arn"]}
              }
            }
          ]
        }
      }
    },
    "myPermissionForTopicRuleToInvokeLambda": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {"Fn::GetAtt": ["myLambda", "Arn"]},
        "Principal": "iot.amazonaws.com",
        "SourceAccount": {"Ref": "AWS::AccountId"},
        "SourceArn": {
          "Fn::Join": [
            "", [
              "arn:aws:iot:",
              { "Ref": "AWS::Region" },
              ":",
              { "Ref": "AWS::AccountId" },
              ":rule/",
              { "Ref": "myTopicRule" }
            ]
          ]
        }
      }
    }
  },
  "Outputs": {
  }
}
